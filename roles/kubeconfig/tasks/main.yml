- name: 创建 TLS Bootstrapping Token auth 文件
  shell: /usr/bin/echo {{ bootstrap_token }},kubelet-bootstrap,10001,\"system:kubelet-bootstrap\" > {{ token_config }}
- name: 生成 kubeconfig 文件
  command: "{{ item }}"
  with_items:
    - "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config set-credentials controller-manager --client-certificate={{ apiserver_client_cert }} --client-key={{ apiserver_client_key }} --embed-certs=true --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user=controller-manager --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config use-context default --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config set-credentials kube-scheduler --client-certificate={{ apiserver_client_cert }} --client-key={{ apiserver_client_key }} --embed-certs=true --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user=kube-scheduler --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config use-context default --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ bootstrap_config }}"
    - "/usr/local/bin/kubectl config set-credentials kubelet-bootstrap --token={{ bootstrap_token }} --kubeconfig={{ bootstrap_config }}"
    - "/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user=kubelet-bootstrap --kubeconfig={{ bootstrap_config }}"
    - "/usr/local/bin/kubectl config use-context default --kubeconfig={{ bootstrap_config }}"

    - "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ kube_proxy_kubeconfig }}"
    - "/usr/local/bin/kubectl config set-credentials kube-proxy --client-certificate={{ apiserver_client_cert }} --client-key={{ apiserver_client_key }} --embed-certs=true --kubeconfig={{ kube_proxy_kubeconfig }}"
    - "/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig={{ kube_proxy_kubeconfig }}"
    - "/usr/local/bin/kubectl config use-context default --kubeconfig={{ kube_proxy_kubeconfig }}"


    - "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }}"
    - "/usr/local/bin/kubectl config set-credentials admin --client-certificate={{ admin_cert }} --embed-certs=true --client-key={{ admin_key }}"
    - "/usr/local/bin/kubectl config set-context kubernetes --cluster=kubernetes --user=admin"
    - "/usr/local/bin/kubectl config use-context kubernetes"
